// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

/*
Package pluginv2 is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	DataSourceConfig
	PluginConfig
	User
	StringList
	CallResourceRequest
	CallResourceResponse
	TimeRange
	DataQuery
	QueryDataRequest
	QueryDataResponse
	DataResponse
	TimeSeries
	Point
	Table
	TableColumn
	TableRow
	RowValue
	CollectMetricsRequest
	CollectMetricsResponse
	CheckHealthRequest
	CheckHealthResponse
*/
package pluginv2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RowValue_Kind int32

const (
	// Field type null.
	RowValue_TYPE_NULL RowValue_Kind = 0
	// Field type double.
	RowValue_TYPE_DOUBLE RowValue_Kind = 1
	// Field type int64.
	RowValue_TYPE_INT64 RowValue_Kind = 2
	// Field type bool.
	RowValue_TYPE_BOOL RowValue_Kind = 3
	// Field type string.
	RowValue_TYPE_STRING RowValue_Kind = 4
	// Field type bytes.
	RowValue_TYPE_BYTES RowValue_Kind = 5
)

var RowValue_Kind_name = map[int32]string{
	0: "TYPE_NULL",
	1: "TYPE_DOUBLE",
	2: "TYPE_INT64",
	3: "TYPE_BOOL",
	4: "TYPE_STRING",
	5: "TYPE_BYTES",
}
var RowValue_Kind_value = map[string]int32{
	"TYPE_NULL":   0,
	"TYPE_DOUBLE": 1,
	"TYPE_INT64":  2,
	"TYPE_BOOL":   3,
	"TYPE_STRING": 4,
	"TYPE_BYTES":  5,
}

func (x RowValue_Kind) String() string {
	return proto.EnumName(RowValue_Kind_name, int32(x))
}
func (RowValue_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type CheckHealthResponse_HealthStatus int32

const (
	CheckHealthResponse_UNKNOWN CheckHealthResponse_HealthStatus = 0
	CheckHealthResponse_OK      CheckHealthResponse_HealthStatus = 1
	CheckHealthResponse_ERROR   CheckHealthResponse_HealthStatus = 2
)

var CheckHealthResponse_HealthStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "ERROR",
}
var CheckHealthResponse_HealthStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"ERROR":   2,
}

func (x CheckHealthResponse_HealthStatus) String() string {
	return proto.EnumName(CheckHealthResponse_HealthStatus_name, int32(x))
}
func (CheckHealthResponse_HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 0}
}

type DataSourceConfig struct {
	Id               int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url              string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	User             string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Database         string `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	BasicAuthEnabled bool   `protobuf:"varint,6,opt,name=basicAuthEnabled" json:"basicAuthEnabled,omitempty"`
	BasicAuthUser    string `protobuf:"bytes,7,opt,name=basicAuthUser" json:"basicAuthUser,omitempty"`
	// from [data_source.json_data] field in the database
	JsonData []byte `protobuf:"bytes,8,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	// from [data_source.secure_json_data] field in the database
	DecryptedSecureJsonData map[string]string `protobuf:"bytes,9,rep,name=decryptedSecureJsonData" json:"decryptedSecureJsonData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastUpdatedMS           int64             `protobuf:"varint,10,opt,name=lastUpdatedMS" json:"lastUpdatedMS,omitempty"`
}

func (m *DataSourceConfig) Reset()                    { *m = DataSourceConfig{} }
func (m *DataSourceConfig) String() string            { return proto.CompactTextString(m) }
func (*DataSourceConfig) ProtoMessage()               {}
func (*DataSourceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataSourceConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataSourceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSourceConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DataSourceConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DataSourceConfig) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *DataSourceConfig) GetBasicAuthEnabled() bool {
	if m != nil {
		return m.BasicAuthEnabled
	}
	return false
}

func (m *DataSourceConfig) GetBasicAuthUser() string {
	if m != nil {
		return m.BasicAuthUser
	}
	return ""
}

func (m *DataSourceConfig) GetJsonData() []byte {
	if m != nil {
		return m.JsonData
	}
	return nil
}

func (m *DataSourceConfig) GetDecryptedSecureJsonData() map[string]string {
	if m != nil {
		return m.DecryptedSecureJsonData
	}
	return nil
}

func (m *DataSourceConfig) GetLastUpdatedMS() int64 {
	if m != nil {
		return m.LastUpdatedMS
	}
	return 0
}

type PluginConfig struct {
	OrgId    int64  `protobuf:"varint,1,opt,name=orgId" json:"orgId,omitempty"`
	PluginId string `protobuf:"bytes,2,opt,name=pluginId" json:"pluginId,omitempty"`
	// from [plugin_setting.json_data] field in the database
	JsonData []byte `protobuf:"bytes,3,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	// from [plugin_setting.secure_json_data] field in the database
	DecryptedSecureJsonData map[string]string `protobuf:"bytes,4,rep,name=decryptedSecureJsonData" json:"decryptedSecureJsonData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastUpdatedMS           int64             `protobuf:"varint,5,opt,name=lastUpdatedMS" json:"lastUpdatedMS,omitempty"`
	DatasourceConfig        *DataSourceConfig `protobuf:"bytes,6,opt,name=datasourceConfig" json:"datasourceConfig,omitempty"`
}

func (m *PluginConfig) Reset()                    { *m = PluginConfig{} }
func (m *PluginConfig) String() string            { return proto.CompactTextString(m) }
func (*PluginConfig) ProtoMessage()               {}
func (*PluginConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PluginConfig) GetOrgId() int64 {
	if m != nil {
		return m.OrgId
	}
	return 0
}

func (m *PluginConfig) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

func (m *PluginConfig) GetJsonData() []byte {
	if m != nil {
		return m.JsonData
	}
	return nil
}

func (m *PluginConfig) GetDecryptedSecureJsonData() map[string]string {
	if m != nil {
		return m.DecryptedSecureJsonData
	}
	return nil
}

func (m *PluginConfig) GetLastUpdatedMS() int64 {
	if m != nil {
		return m.LastUpdatedMS
	}
	return 0
}

func (m *PluginConfig) GetDatasourceConfig() *DataSourceConfig {
	if m != nil {
		return m.DatasourceConfig
	}
	return nil
}

type User struct {
	Login string `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Role  string `protobuf:"bytes,4,opt,name=role" json:"role,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type StringList struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *StringList) Reset()                    { *m = StringList{} }
func (m *StringList) String() string            { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()               {}
func (*StringList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StringList) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type CallResourceRequest struct {
	Config  *PluginConfig          `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	User    *User                  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Path    string                 `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Method  string                 `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Url     string                 `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Headers map[string]*StringList `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body    []byte                 `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CallResourceRequest) Reset()                    { *m = CallResourceRequest{} }
func (m *CallResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CallResourceRequest) ProtoMessage()               {}
func (*CallResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CallResourceRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CallResourceRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CallResourceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CallResourceRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CallResourceRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CallResourceRequest) GetHeaders() map[string]*StringList {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *CallResourceRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CallResourceResponse struct {
	Code    int32                  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Headers map[string]*StringList `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body    []byte                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CallResourceResponse) Reset()                    { *m = CallResourceResponse{} }
func (m *CallResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*CallResourceResponse) ProtoMessage()               {}
func (*CallResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CallResourceResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CallResourceResponse) GetHeaders() map[string]*StringList {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *CallResourceResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type TimeRange struct {
	FromEpochMS int64 `protobuf:"varint,1,opt,name=fromEpochMS" json:"fromEpochMS,omitempty"`
	ToEpochMS   int64 `protobuf:"varint,2,opt,name=toEpochMS" json:"toEpochMS,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TimeRange) GetFromEpochMS() int64 {
	if m != nil {
		return m.FromEpochMS
	}
	return 0
}

func (m *TimeRange) GetToEpochMS() int64 {
	if m != nil {
		return m.ToEpochMS
	}
	return 0
}

type DataQuery struct {
	RefId         string     `protobuf:"bytes,1,opt,name=refId" json:"refId,omitempty"`
	MaxDataPoints int64      `protobuf:"varint,2,opt,name=maxDataPoints" json:"maxDataPoints,omitempty"`
	IntervalMS    int64      `protobuf:"varint,3,opt,name=intervalMS" json:"intervalMS,omitempty"`
	TimeRange     *TimeRange `protobuf:"bytes,4,opt,name=timeRange" json:"timeRange,omitempty"`
	Json          []byte     `protobuf:"bytes,5,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *DataQuery) Reset()                    { *m = DataQuery{} }
func (m *DataQuery) String() string            { return proto.CompactTextString(m) }
func (*DataQuery) ProtoMessage()               {}
func (*DataQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DataQuery) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *DataQuery) GetMaxDataPoints() int64 {
	if m != nil {
		return m.MaxDataPoints
	}
	return 0
}

func (m *DataQuery) GetIntervalMS() int64 {
	if m != nil {
		return m.IntervalMS
	}
	return 0
}

func (m *DataQuery) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *DataQuery) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

// QueryDataRequest
type QueryDataRequest struct {
	// Plugin Configuration
	Config *PluginConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Info about the user who calls the plugin.
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// Environment info
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// List of data queries
	Queries []*DataQuery `protobuf:"bytes,4,rep,name=queries" json:"queries,omitempty"`
}

func (m *QueryDataRequest) Reset()                    { *m = QueryDataRequest{} }
func (m *QueryDataRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryDataRequest) ProtoMessage()               {}
func (*QueryDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryDataRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *QueryDataRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *QueryDataRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *QueryDataRequest) GetQueries() []*DataQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type QueryDataResponse struct {
	// Map of refId to response
	Responses map[string]*DataResponse `protobuf:"bytes,4,rep,name=responses" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ORIGINAL
	// Arrow encoded DataFrames
	// Each frame encodes its own: Errors, meta, and refId
	Frames [][]byte `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	// Additional response metadata
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Json     []byte            `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *QueryDataResponse) Reset()                    { *m = QueryDataResponse{} }
func (m *QueryDataResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryDataResponse) ProtoMessage()               {}
func (*QueryDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryDataResponse) GetResponses() map[string]*DataResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *QueryDataResponse) GetFrames() [][]byte {
	if m != nil {
		return m.Frames
	}
	return nil
}

func (m *QueryDataResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *QueryDataResponse) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

type DataResponse struct {
	// Arrow encoded DataFrames
	// Frame has its own meta, warnings, and repeats refId
	Frames   [][]byte      `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	Error    string        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	JsonMeta []byte        `protobuf:"bytes,3,opt,name=jsonMeta,proto3" json:"jsonMeta,omitempty"`
	Series   []*TimeSeries `protobuf:"bytes,4,rep,name=series" json:"series,omitempty"`
	Tables   []*Table      `protobuf:"bytes,5,rep,name=tables" json:"tables,omitempty"`
}

func (m *DataResponse) Reset()                    { *m = DataResponse{} }
func (m *DataResponse) String() string            { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()               {}
func (*DataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DataResponse) GetFrames() [][]byte {
	if m != nil {
		return m.Frames
	}
	return nil
}

func (m *DataResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DataResponse) GetJsonMeta() []byte {
	if m != nil {
		return m.JsonMeta
	}
	return nil
}

func (m *DataResponse) GetSeries() []*TimeSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *DataResponse) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

// Tables and Timeseries
type TimeSeries struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Points []*Point          `protobuf:"bytes,3,rep,name=points" json:"points,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TimeSeries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TimeSeries) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type Point struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Point) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Table struct {
	Columns []*TableColumn `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Rows    []*TableRow    `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Table) GetColumns() []*TableColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Table) GetRows() []*TableRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type TableColumn struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TableColumn) Reset()                    { *m = TableColumn{} }
func (m *TableColumn) String() string            { return proto.CompactTextString(m) }
func (*TableColumn) ProtoMessage()               {}
func (*TableColumn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TableColumn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TableRow struct {
	Values []*RowValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *TableRow) Reset()                    { *m = TableRow{} }
func (m *TableRow) String() string            { return proto.CompactTextString(m) }
func (*TableRow) ProtoMessage()               {}
func (*TableRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TableRow) GetValues() []*RowValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type RowValue struct {
	Kind        RowValue_Kind `protobuf:"varint,1,opt,name=kind,enum=pluginv2.RowValue_Kind" json:"kind,omitempty"`
	DoubleValue float64       `protobuf:"fixed64,2,opt,name=doubleValue" json:"doubleValue,omitempty"`
	Int64Value  int64         `protobuf:"varint,3,opt,name=int64Value" json:"int64Value,omitempty"`
	BoolValue   bool          `protobuf:"varint,4,opt,name=boolValue" json:"boolValue,omitempty"`
	StringValue string        `protobuf:"bytes,5,opt,name=stringValue" json:"stringValue,omitempty"`
	BytesValue  []byte        `protobuf:"bytes,6,opt,name=bytesValue,proto3" json:"bytesValue,omitempty"`
}

func (m *RowValue) Reset()                    { *m = RowValue{} }
func (m *RowValue) String() string            { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()               {}
func (*RowValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RowValue) GetKind() RowValue_Kind {
	if m != nil {
		return m.Kind
	}
	return RowValue_TYPE_NULL
}

func (m *RowValue) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *RowValue) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *RowValue) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *RowValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *RowValue) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

type CollectMetricsRequest struct {
}

func (m *CollectMetricsRequest) Reset()                    { *m = CollectMetricsRequest{} }
func (m *CollectMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsRequest) ProtoMessage()               {}
func (*CollectMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type CollectMetricsResponse struct {
	Metrics *CollectMetricsResponse_Payload `protobuf:"bytes,1,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *CollectMetricsResponse) Reset()                    { *m = CollectMetricsResponse{} }
func (m *CollectMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsResponse) ProtoMessage()               {}
func (*CollectMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CollectMetricsResponse) GetMetrics() *CollectMetricsResponse_Payload {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CollectMetricsResponse_Payload struct {
	Prometheus []byte `protobuf:"bytes,1,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
}

func (m *CollectMetricsResponse_Payload) Reset()         { *m = CollectMetricsResponse_Payload{} }
func (m *CollectMetricsResponse_Payload) String() string { return proto.CompactTextString(m) }
func (*CollectMetricsResponse_Payload) ProtoMessage()    {}
func (*CollectMetricsResponse_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

func (m *CollectMetricsResponse_Payload) GetPrometheus() []byte {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

type CheckHealthRequest struct {
	Config *PluginConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *CheckHealthRequest) Reset()                    { *m = CheckHealthRequest{} }
func (m *CheckHealthRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckHealthRequest) ProtoMessage()               {}
func (*CheckHealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CheckHealthRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CheckHealthResponse struct {
	Status      CheckHealthResponse_HealthStatus `protobuf:"varint,1,opt,name=status,enum=pluginv2.CheckHealthResponse_HealthStatus" json:"status,omitempty"`
	Message     string                           `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	JsonDetails []byte                           `protobuf:"bytes,3,opt,name=jsonDetails,proto3" json:"jsonDetails,omitempty"`
}

func (m *CheckHealthResponse) Reset()                    { *m = CheckHealthResponse{} }
func (m *CheckHealthResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckHealthResponse) ProtoMessage()               {}
func (*CheckHealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CheckHealthResponse) GetStatus() CheckHealthResponse_HealthStatus {
	if m != nil {
		return m.Status
	}
	return CheckHealthResponse_UNKNOWN
}

func (m *CheckHealthResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CheckHealthResponse) GetJsonDetails() []byte {
	if m != nil {
		return m.JsonDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSourceConfig)(nil), "pluginv2.DataSourceConfig")
	proto.RegisterType((*PluginConfig)(nil), "pluginv2.PluginConfig")
	proto.RegisterType((*User)(nil), "pluginv2.User")
	proto.RegisterType((*StringList)(nil), "pluginv2.StringList")
	proto.RegisterType((*CallResourceRequest)(nil), "pluginv2.CallResourceRequest")
	proto.RegisterType((*CallResourceResponse)(nil), "pluginv2.CallResourceResponse")
	proto.RegisterType((*TimeRange)(nil), "pluginv2.TimeRange")
	proto.RegisterType((*DataQuery)(nil), "pluginv2.DataQuery")
	proto.RegisterType((*QueryDataRequest)(nil), "pluginv2.QueryDataRequest")
	proto.RegisterType((*QueryDataResponse)(nil), "pluginv2.QueryDataResponse")
	proto.RegisterType((*DataResponse)(nil), "pluginv2.DataResponse")
	proto.RegisterType((*TimeSeries)(nil), "pluginv2.TimeSeries")
	proto.RegisterType((*Point)(nil), "pluginv2.Point")
	proto.RegisterType((*Table)(nil), "pluginv2.Table")
	proto.RegisterType((*TableColumn)(nil), "pluginv2.TableColumn")
	proto.RegisterType((*TableRow)(nil), "pluginv2.TableRow")
	proto.RegisterType((*RowValue)(nil), "pluginv2.RowValue")
	proto.RegisterType((*CollectMetricsRequest)(nil), "pluginv2.CollectMetricsRequest")
	proto.RegisterType((*CollectMetricsResponse)(nil), "pluginv2.CollectMetricsResponse")
	proto.RegisterType((*CollectMetricsResponse_Payload)(nil), "pluginv2.CollectMetricsResponse.Payload")
	proto.RegisterType((*CheckHealthRequest)(nil), "pluginv2.CheckHealthRequest")
	proto.RegisterType((*CheckHealthResponse)(nil), "pluginv2.CheckHealthResponse")
	proto.RegisterEnum("pluginv2.RowValue_Kind", RowValue_Kind_name, RowValue_Kind_value)
	proto.RegisterEnum("pluginv2.CheckHealthResponse_HealthStatus", CheckHealthResponse_HealthStatus_name, CheckHealthResponse_HealthStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Resource service

type ResourceClient interface {
	CallResource(ctx context.Context, in *CallResourceRequest, opts ...grpc.CallOption) (Resource_CallResourceClient, error)
}

type resourceClient struct {
	cc *grpc.ClientConn
}

func NewResourceClient(cc *grpc.ClientConn) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) CallResource(ctx context.Context, in *CallResourceRequest, opts ...grpc.CallOption) (Resource_CallResourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Resource_serviceDesc.Streams[0], c.cc, "/pluginv2.Resource/CallResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceCallResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_CallResourceClient interface {
	Recv() (*CallResourceResponse, error)
	grpc.ClientStream
}

type resourceCallResourceClient struct {
	grpc.ClientStream
}

func (x *resourceCallResourceClient) Recv() (*CallResourceResponse, error) {
	m := new(CallResourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Resource service

type ResourceServer interface {
	CallResource(*CallResourceRequest, Resource_CallResourceServer) error
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_CallResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).CallResource(m, &resourceCallResourceServer{stream})
}

type Resource_CallResourceServer interface {
	Send(*CallResourceResponse) error
	grpc.ServerStream
}

type resourceCallResourceServer struct {
	grpc.ServerStream
}

func (x *resourceCallResourceServer) Send(m *CallResourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallResource",
			Handler:       _Resource_CallResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

// Client API for Data service

type DataClient interface {
	QueryData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) QueryData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error) {
	out := new(QueryDataResponse)
	err := grpc.Invoke(ctx, "/pluginv2.Data/QueryData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Data service

type DataServer interface {
	QueryData(context.Context, *QueryDataRequest) (*QueryDataResponse, error)
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_QueryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).QueryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginv2.Data/QueryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).QueryData(ctx, req.(*QueryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryData",
			Handler:    _Data_QueryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

// Client API for Diagnostics service

type DiagnosticsClient interface {
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
	CollectMetrics(ctx context.Context, in *CollectMetricsRequest, opts ...grpc.CallOption) (*CollectMetricsResponse, error)
}

type diagnosticsClient struct {
	cc *grpc.ClientConn
}

func NewDiagnosticsClient(cc *grpc.ClientConn) DiagnosticsClient {
	return &diagnosticsClient{cc}
}

func (c *diagnosticsClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	out := new(CheckHealthResponse)
	err := grpc.Invoke(ctx, "/pluginv2.Diagnostics/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticsClient) CollectMetrics(ctx context.Context, in *CollectMetricsRequest, opts ...grpc.CallOption) (*CollectMetricsResponse, error) {
	out := new(CollectMetricsResponse)
	err := grpc.Invoke(ctx, "/pluginv2.Diagnostics/CollectMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Diagnostics service

type DiagnosticsServer interface {
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
	CollectMetrics(context.Context, *CollectMetricsRequest) (*CollectMetricsResponse, error)
}

func RegisterDiagnosticsServer(s *grpc.Server, srv DiagnosticsServer) {
	s.RegisterService(&_Diagnostics_serviceDesc, srv)
}

func _Diagnostics_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginv2.Diagnostics/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diagnostics_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginv2.Diagnostics/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServer).CollectMetrics(ctx, req.(*CollectMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diagnostics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Diagnostics",
	HandlerType: (*DiagnosticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _Diagnostics_CheckHealth_Handler,
		},
		{
			MethodName: "CollectMetrics",
			Handler:    _Diagnostics_CollectMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

// Client API for Transform service

type TransformClient interface {
	TransformData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error)
}

type transformClient struct {
	cc *grpc.ClientConn
}

func NewTransformClient(cc *grpc.ClientConn) TransformClient {
	return &transformClient{cc}
}

func (c *transformClient) TransformData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error) {
	out := new(QueryDataResponse)
	err := grpc.Invoke(ctx, "/pluginv2.Transform/TransformData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transform service

type TransformServer interface {
	TransformData(context.Context, *QueryDataRequest) (*QueryDataResponse, error)
}

func RegisterTransformServer(s *grpc.Server, srv TransformServer) {
	s.RegisterService(&_Transform_serviceDesc, srv)
}

func _Transform_TransformData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServer).TransformData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginv2.Transform/TransformData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServer).TransformData(ctx, req.(*QueryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.Transform",
	HandlerType: (*TransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformData",
			Handler:    _Transform_TransformData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

// Client API for TransformDataCallBack service

type TransformDataCallBackClient interface {
	QueryData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error)
}

type transformDataCallBackClient struct {
	cc *grpc.ClientConn
}

func NewTransformDataCallBackClient(cc *grpc.ClientConn) TransformDataCallBackClient {
	return &transformDataCallBackClient{cc}
}

func (c *transformDataCallBackClient) QueryData(ctx context.Context, in *QueryDataRequest, opts ...grpc.CallOption) (*QueryDataResponse, error) {
	out := new(QueryDataResponse)
	err := grpc.Invoke(ctx, "/pluginv2.TransformDataCallBack/QueryData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransformDataCallBack service

type TransformDataCallBackServer interface {
	QueryData(context.Context, *QueryDataRequest) (*QueryDataResponse, error)
}

func RegisterTransformDataCallBackServer(s *grpc.Server, srv TransformDataCallBackServer) {
	s.RegisterService(&_TransformDataCallBack_serviceDesc, srv)
}

func _TransformDataCallBack_QueryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformDataCallBackServer).QueryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginv2.TransformDataCallBack/QueryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformDataCallBackServer).QueryData(ctx, req.(*QueryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransformDataCallBack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginv2.TransformDataCallBack",
	HandlerType: (*TransformDataCallBackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryData",
			Handler:    _TransformDataCallBack_QueryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x72, 0x1b, 0x45,
	0x10, 0xce, 0xea, 0xcf, 0xda, 0x96, 0xec, 0x2c, 0x63, 0xc7, 0x51, 0x89, 0x24, 0x88, 0xad, 0x14,
	0x71, 0x9c, 0x20, 0x40, 0x49, 0x25, 0x54, 0x72, 0x8a, 0x6d, 0x81, 0x1d, 0xff, 0x32, 0x92, 0x43,
	0x25, 0x14, 0x05, 0xa3, 0xdd, 0xb1, 0xbc, 0x78, 0x77, 0x47, 0xd9, 0x1d, 0x25, 0xf8, 0x01, 0x28,
	0x5e, 0x80, 0xe7, 0x08, 0x37, 0xee, 0x1c, 0x38, 0x71, 0xe4, 0xc0, 0x03, 0xf0, 0x22, 0xd4, 0xcc,
	0xce, 0xfe, 0xc9, 0x92, 0x53, 0x81, 0xe4, 0x36, 0xdd, 0xd3, 0xdd, 0xd3, 0xfd, 0x75, 0x4f, 0xf7,
	0xec, 0xc2, 0xfc, 0x80, 0x58, 0x27, 0xd4, 0xb7, 0xdb, 0xa3, 0x80, 0x71, 0x86, 0xaa, 0x23, 0x77,
	0x3c, 0x74, 0xfc, 0x17, 0x1d, 0xf3, 0xcf, 0x22, 0x18, 0x1b, 0x84, 0x93, 0x1e, 0x1b, 0x07, 0x16,
	0x5d, 0x67, 0xfe, 0x91, 0x33, 0x44, 0x0b, 0x50, 0x70, 0xec, 0x86, 0xd6, 0xd2, 0x56, 0x8a, 0xb8,
	0xe0, 0xd8, 0x08, 0x41, 0xc9, 0x27, 0x1e, 0x6d, 0x14, 0x5a, 0xda, 0x8a, 0x8e, 0xe5, 0x1a, 0x19,
	0x50, 0x1c, 0x07, 0x6e, 0xa3, 0x28, 0x59, 0x62, 0x29, 0xa4, 0xc6, 0x21, 0x0d, 0x1a, 0xa5, 0x48,
	0x4a, 0xac, 0x51, 0x13, 0xaa, 0x36, 0xe1, 0x64, 0x40, 0x42, 0xda, 0x28, 0x4b, 0x7e, 0x42, 0xa3,
	0x55, 0x30, 0x06, 0x24, 0x74, 0xac, 0x47, 0x63, 0x7e, 0xdc, 0xf5, 0xc9, 0xc0, 0xa5, 0x76, 0xa3,
	0xd2, 0xd2, 0x56, 0xaa, 0xf8, 0x0c, 0x1f, 0x5d, 0x17, 0x11, 0x28, 0xde, 0xa1, 0x38, 0x64, 0x4e,
	0x1a, 0xcb, 0x33, 0xc5, 0x69, 0x3f, 0x84, 0xcc, 0x17, 0xf1, 0x34, 0xaa, 0x2d, 0x6d, 0xa5, 0x8e,
	0x13, 0x1a, 0x3d, 0x87, 0xcb, 0x36, 0xb5, 0x82, 0xd3, 0x11, 0xa7, 0x76, 0x8f, 0x5a, 0xe3, 0x80,
	0x3e, 0x8e, 0x45, 0xf5, 0x56, 0x71, 0xa5, 0xd6, 0xb9, 0xdf, 0x8e, 0x41, 0x69, 0x4f, 0x02, 0xd2,
	0xde, 0x98, 0xae, 0xd9, 0xf5, 0x79, 0x70, 0x8a, 0x67, 0xd9, 0x15, 0x4e, 0xbb, 0x24, 0xe4, 0x87,
	0x23, 0x9b, 0x70, 0x6a, 0xef, 0xf6, 0x1a, 0x20, 0x11, 0xcd, 0x33, 0x9b, 0x8f, 0xe1, 0xca, 0x79,
	0xe6, 0x05, 0xd0, 0x27, 0xf4, 0x54, 0x66, 0x43, 0xc7, 0x62, 0x89, 0x96, 0xa0, 0xfc, 0x82, 0xb8,
	0xe3, 0x38, 0x1f, 0x11, 0xf1, 0xa0, 0xf0, 0xb9, 0x66, 0xfe, 0x54, 0x84, 0xfa, 0x81, 0x8c, 0x42,
	0x65, 0x72, 0x09, 0xca, 0x2c, 0x18, 0x6e, 0xc5, 0xc9, 0x8c, 0x08, 0x81, 0x53, 0x14, 0xeb, 0x96,
	0xad, 0x6c, 0x24, 0x74, 0x0e, 0xc3, 0xe2, 0x04, 0x86, 0xde, 0x6c, 0x0c, 0x4b, 0x12, 0xc3, 0x3b,
	0x29, 0x86, 0x59, 0x37, 0xde, 0x16, 0x7e, 0xe5, 0x29, 0xf8, 0xa1, 0x2f, 0xc0, 0x10, 0x25, 0x15,
	0x66, 0xf2, 0x25, 0xcb, 0xa8, 0xd6, 0x69, 0xce, 0xce, 0x28, 0x3e, 0xa3, 0xf3, 0x56, 0xf3, 0xf0,
	0x0c, 0x4a, 0xb2, 0x20, 0x97, 0xa0, 0xec, 0xb2, 0xa1, 0xe3, 0x2b, 0xad, 0x88, 0x98, 0x7a, 0x9d,
	0x96, 0xa0, 0x4c, 0x3d, 0xe2, 0xc4, 0x17, 0x2a, 0x22, 0x84, 0x64, 0xc0, 0x5c, 0x1a, 0x5f, 0x29,
	0xb1, 0x36, 0xaf, 0x03, 0xf4, 0x78, 0xe0, 0xf8, 0xc3, 0x1d, 0x27, 0xe4, 0x68, 0x19, 0x2a, 0xf2,
	0xd8, 0xb0, 0xa1, 0xb5, 0x8a, 0x2b, 0x3a, 0x56, 0x94, 0xf9, 0x57, 0x01, 0x16, 0xd7, 0x89, 0xeb,
	0x62, 0x1a, 0x05, 0x89, 0xe9, 0xf3, 0x31, 0x0d, 0x39, 0x6a, 0x43, 0xc5, 0x8a, 0x30, 0xd2, 0x24,
	0x46, 0xcb, 0xd3, 0x33, 0x86, 0x95, 0x14, 0x32, 0xd5, 0xa5, 0x2e, 0x48, 0xe9, 0x85, 0x54, 0x5a,
	0xc4, 0xa7, 0x2e, 0x39, 0x82, 0xd2, 0x88, 0xf0, 0x63, 0xe5, 0xba, 0x5c, 0x0b, 0xbf, 0x3c, 0xca,
	0x8f, 0x99, 0xad, 0x7c, 0x57, 0x54, 0xdc, 0x36, 0xca, 0x69, 0xdb, 0xd8, 0x80, 0xb9, 0x63, 0x4a,
	0x6c, 0x1a, 0x84, 0x8d, 0x8a, 0x2c, 0xa2, 0xd5, 0xf4, 0x90, 0x29, 0x11, 0xb4, 0x37, 0x23, 0xe1,
	0xa8, 0x76, 0x62, 0x55, 0xe1, 0xc3, 0x80, 0xd9, 0xa7, 0xb2, 0x2f, 0xd4, 0xb1, 0x5c, 0x37, 0x0f,
	0xa0, 0x9e, 0x15, 0x9e, 0x92, 0xc1, 0xd5, 0x6c, 0x06, 0x6b, 0x9d, 0xa5, 0xf4, 0xe4, 0x14, 0xe2,
	0x6c, 0x5e, 0xff, 0xd6, 0x60, 0x29, 0xef, 0x53, 0x38, 0x62, 0x7e, 0x48, 0xc5, 0xf1, 0x16, 0xb3,
	0xa9, 0xb4, 0x5d, 0xc6, 0x72, 0x8d, 0xba, 0x69, 0x60, 0x05, 0x19, 0xd8, 0xad, 0x59, 0x81, 0x45,
	0x46, 0x5e, 0x13, 0x59, 0xf1, 0x9d, 0x46, 0xb6, 0x0d, 0x7a, 0xdf, 0xf1, 0x28, 0x26, 0xfe, 0x90,
	0xa2, 0x16, 0xd4, 0x8e, 0x02, 0xe6, 0x75, 0x47, 0xcc, 0x3a, 0xde, 0xed, 0xa9, 0xde, 0x91, 0x65,
	0xa1, 0x2b, 0xa0, 0x73, 0x16, 0xef, 0x17, 0xe4, 0x7e, 0xca, 0x30, 0x5f, 0x69, 0xa0, 0x8b, 0x8b,
	0xf3, 0xd5, 0x98, 0x06, 0xf2, 0x9a, 0x04, 0xf4, 0x48, 0xf5, 0x20, 0x1d, 0x47, 0x84, 0xb8, 0xdc,
	0x1e, 0xf9, 0x51, 0x48, 0x1d, 0x30, 0xc7, 0xe7, 0xa1, 0xb2, 0x92, 0x67, 0xa2, 0x6b, 0x00, 0x8e,
	0xcf, 0x69, 0xf0, 0x82, 0xb8, 0xbb, 0x3d, 0x09, 0x41, 0x11, 0x67, 0x38, 0xe8, 0x33, 0xd0, 0x79,
	0xec, 0xb6, 0xac, 0xb4, 0x5a, 0x67, 0x31, 0x0d, 0x35, 0x89, 0x08, 0xa7, 0x52, 0x02, 0x4f, 0xd1,
	0xd0, 0x64, 0x09, 0xd6, 0xb1, 0x5c, 0x9b, 0xbf, 0x14, 0xc0, 0x90, 0xce, 0x8a, 0xa3, 0xdf, 0xe5,
	0x55, 0x79, 0x94, 0xd6, 0x44, 0x51, 0xd6, 0xc4, 0x8d, 0x54, 0x6c, 0xd2, 0x81, 0x19, 0xf5, 0xf0,
	0x31, 0xcc, 0x3d, 0x1f, 0xd3, 0xc0, 0xa1, 0xa1, 0x6a, 0xba, 0x8b, 0xf9, 0x36, 0x27, 0xcd, 0xe0,
	0x58, 0xa6, 0xf9, 0xe0, 0xb5, 0xa5, 0x32, 0xbb, 0x8d, 0xfd, 0x53, 0x80, 0xf7, 0x32, 0x5e, 0xa9,
	0x5a, 0xdf, 0x04, 0x3d, 0x50, 0xeb, 0xd8, 0x85, 0xd5, 0xa9, 0x51, 0xa8, 0xb2, 0x8e, 0x17, 0x2a,
	0x90, 0x54, 0x59, 0x34, 0x89, 0xa3, 0x80, 0x78, 0xaa, 0x79, 0xd5, 0xb1, 0xa2, 0x50, 0x17, 0xaa,
	0x1e, 0xe5, 0x44, 0xb4, 0x68, 0x75, 0x75, 0x6e, 0x9e, 0x77, 0xc0, 0xae, 0x92, 0x8d, 0xec, 0x27,
	0xaa, 0x49, 0xa6, 0x8b, 0x69, 0xa6, 0x9b, 0x7d, 0x58, 0xc8, 0xfb, 0x33, 0x05, 0x90, 0xdb, 0xf9,
	0xbb, 0xb3, 0x9c, 0xc7, 0x37, 0x56, 0xcf, 0x00, 0xd5, 0x7c, 0x08, 0xf3, 0x39, 0x27, 0xde, 0x08,
	0xe5, 0x5f, 0x35, 0xa8, 0xe7, 0x00, 0x9e, 0x05, 0x8b, 0x98, 0x11, 0x41, 0xc0, 0x82, 0xd8, 0x84,
	0x24, 0xe2, 0x81, 0x2d, 0xce, 0xcf, 0x0e, 0x6c, 0x41, 0xa3, 0xdb, 0x50, 0x09, 0xb3, 0xa5, 0xb2,
	0x94, 0xbf, 0x1b, 0x3d, 0xb9, 0x87, 0x95, 0x0c, 0xba, 0x01, 0x15, 0x2e, 0x9e, 0x5b, 0x61, 0xa3,
	0x2c, 0xa5, 0x2f, 0x66, 0xa4, 0x05, 0x1f, 0xab, 0x6d, 0xf3, 0x37, 0x0d, 0x20, 0xd5, 0x4f, 0xe6,
	0x99, 0x96, 0x99, 0x67, 0x1d, 0x28, 0x71, 0x32, 0x8c, 0x3b, 0xdf, 0xb5, 0x69, 0xe7, 0xb6, 0xfb,
	0x64, 0xa8, 0x6a, 0x42, 0xca, 0x8a, 0xf3, 0x47, 0x51, 0x2f, 0x28, 0x4e, 0x9e, 0x2f, 0xdb, 0x01,
	0x56, 0xdb, 0xcd, 0xfb, 0xa0, 0x27, 0xba, 0x6f, 0x04, 0xf5, 0x43, 0x28, 0x4b, 0x4b, 0xb2, 0x7f,
	0x39, 0x1e, 0x0d, 0x39, 0xf1, 0x46, 0xaa, 0xbf, 0xa5, 0x8c, 0xbc, 0x01, 0x4d, 0x19, 0x30, 0xbf,
	0x87, 0xb2, 0x84, 0x01, 0x7d, 0x02, 0x73, 0x16, 0x73, 0xc7, 0x9e, 0x1f, 0x25, 0xa8, 0xd6, 0xb9,
	0x34, 0x01, 0xd4, 0xba, 0xdc, 0xc5, 0xb1, 0x14, 0xfa, 0x48, 0x8c, 0xf1, 0x97, 0x31, 0x18, 0x68,
	0x12, 0x56, 0xf6, 0x12, 0xcb, 0x7d, 0xf3, 0x43, 0xa8, 0x65, 0xf4, 0xa7, 0xe1, 0x6a, 0xde, 0x83,
	0x6a, 0xac, 0x84, 0x56, 0x73, 0xb3, 0x3f, 0x67, 0x18, 0xb3, 0x97, 0x4f, 0xc4, 0x56, 0xf2, 0x1e,
	0xf8, 0xbd, 0x00, 0xd5, 0x98, 0x89, 0x6e, 0x41, 0xe9, 0xc4, 0xf1, 0xa3, 0x86, 0xbc, 0xd0, 0xb9,
	0x7c, 0x56, 0xad, 0xbd, 0xed, 0xf8, 0x36, 0x96, 0x42, 0x62, 0x18, 0xd8, 0x6c, 0x3c, 0x70, 0xe9,
	0x93, 0x0c, 0x24, 0x59, 0x96, 0x6a, 0xd2, 0xf7, 0xee, 0x46, 0x02, 0x69, 0x93, 0x56, 0x1c, 0x01,
	0xf6, 0x80, 0x31, 0x37, 0xda, 0x2e, 0xc9, 0x17, 0x7e, 0xca, 0x10, 0xf6, 0x43, 0x39, 0x92, 0xa2,
	0xfd, 0xe8, 0x65, 0x90, 0x65, 0x09, 0xfb, 0x83, 0x53, 0x4e, 0xc3, 0x48, 0xa0, 0x22, 0x6b, 0x3c,
	0xc3, 0x31, 0x8f, 0xa0, 0x24, 0xfc, 0x45, 0xf3, 0xa0, 0xf7, 0x9f, 0x1e, 0x74, 0xbf, 0xdb, 0x3b,
	0xdc, 0xd9, 0x31, 0x2e, 0xa0, 0x8b, 0x50, 0x93, 0xe4, 0xc6, 0xfe, 0xe1, 0xda, 0x4e, 0xd7, 0xd0,
	0xd0, 0x02, 0x80, 0x64, 0x6c, 0xed, 0xf5, 0xef, 0xdd, 0x35, 0x0a, 0x89, 0xfc, 0xda, 0xfe, 0xfe,
	0x8e, 0x51, 0x4c, 0xe4, 0x7b, 0x7d, 0xbc, 0xb5, 0xf7, 0xa5, 0x51, 0x4a, 0xe4, 0xd7, 0x9e, 0xf6,
	0xbb, 0x3d, 0xa3, 0x6c, 0x5e, 0x86, 0x4b, 0xeb, 0xcc, 0x75, 0xa9, 0xc5, 0x77, 0x29, 0x0f, 0x1c,
	0x2b, 0x54, 0x8d, 0xda, 0xfc, 0x59, 0x83, 0xe5, 0xc9, 0x1d, 0x75, 0x97, 0xd7, 0x60, 0xce, 0x8b,
	0x58, 0x6a, 0x8a, 0xac, 0x64, 0x1e, 0x01, 0x53, 0x55, 0xda, 0x07, 0xe4, 0xd4, 0x65, 0xc4, 0xc6,
	0xb1, 0x62, 0xf3, 0x26, 0xcc, 0x29, 0x9e, 0x80, 0x62, 0x14, 0x30, 0xf1, 0x96, 0xa2, 0xe3, 0xc8,
	0x62, 0x1d, 0x67, 0x38, 0xe6, 0x06, 0xa0, 0xf5, 0x63, 0x6a, 0x9d, 0x6c, 0x52, 0xe2, 0xf2, 0xe3,
	0xff, 0x38, 0xc9, 0xcc, 0x3f, 0x34, 0x58, 0xcc, 0x99, 0x49, 0x82, 0xa9, 0x84, 0x9c, 0x70, 0x75,
	0xf2, 0x42, 0xee, 0xa5, 0x76, 0x56, 0xbc, 0x1d, 0x91, 0x3d, 0xa9, 0x81, 0x95, 0x26, 0x6a, 0x08,
	0x40, 0xc2, 0x90, 0x0c, 0xe3, 0xeb, 0x19, 0x93, 0xa2, 0x10, 0xe4, 0x97, 0x06, 0xe5, 0xc4, 0x71,
	0x43, 0xd5, 0xcb, 0xb2, 0x2c, 0xb3, 0x2d, 0x67, 0x59, 0x62, 0x13, 0xd5, 0x60, 0xee, 0x70, 0x6f,
	0x7b, 0x6f, 0xff, 0xeb, 0x3d, 0xe3, 0x02, 0xaa, 0x40, 0x61, 0x7f, 0xdb, 0xd0, 0x90, 0x0e, 0xe5,
	0x2e, 0xc6, 0xfb, 0xd8, 0x28, 0x74, 0xbe, 0x81, 0x6a, 0xfc, 0xc8, 0x42, 0xfb, 0x50, 0xcf, 0x3e,
	0xba, 0xd0, 0xd5, 0x73, 0x5f, 0x99, 0xcd, 0x6b, 0xe7, 0xbf, 0xd5, 0x3e, 0xd5, 0x3a, 0x3b, 0x50,
	0x92, 0x5f, 0x29, 0x1b, 0xa0, 0x27, 0x23, 0x09, 0x35, 0x67, 0x8f, 0xf3, 0xe6, 0xfb, 0xe7, 0xcc,
	0xb0, 0xce, 0x2b, 0x0d, 0x6a, 0x1b, 0x0e, 0x19, 0xfa, 0x2c, 0xe4, 0x8e, 0x15, 0xa2, 0xc7, 0x50,
	0xcb, 0x40, 0x8a, 0xae, 0xcc, 0x40, 0x3a, 0xb2, 0x7c, 0xf5, 0xdc, 0x3c, 0xa0, 0x1e, 0x2c, 0xe4,
	0x4b, 0x0d, 0x7d, 0x30, 0xbb, 0x08, 0x23, 0x8b, 0xad, 0xd7, 0x55, 0x69, 0xe7, 0x10, 0xf4, 0x7e,
	0x40, 0xfc, 0xf0, 0x88, 0x05, 0x1e, 0xda, 0x84, 0xf9, 0x84, 0xf8, 0x7f, 0x38, 0x7c, 0x0b, 0x97,
	0x72, 0x96, 0x04, 0xf8, 0x6b, 0xc4, 0x3a, 0x79, 0x3b, 0x30, 0xaf, 0xc1, 0xb3, 0xe4, 0xd7, 0xc7,
	0xa0, 0x22, 0xff, 0x85, 0xdc, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x71, 0x71, 0x4b, 0x1c,
	0x11, 0x00, 0x00,
}
